//@ts-check
const {
  Resource,
  Fields,
  Repositories,
  SoftDeletes,
} = require('@avonjs/avonjs');

module.exports = class __NAME__ extends Resource {
  /**
   * Get the fields available on the entity.
   *
   * @param {import('@avonjs/avonjs').AvonRequest} request
   * @returns {import('@avonjs/avonjs').Fields.Field[]}
   */
  fields(request) {
    return [new Fields.ID()];
  }

  /**
   * Get the related repository.
   */
  repository() {
    return new (class extends SoftDeletes(Repositories.Collection) {
      /**
       * Get list of search columns.
       */
      searchableColumns() {
        return [];
      }
    })();
  }

  /**
   * Get action event repository for resource.
   */
  actionRepository() {
    return super.actionRepository();
  }

  /**
   * Build a "relatable" query for the given resource.
   *
   * This query determines which instances of the model may be attached to other resources.
   *
   * @param {import('@avonjs/avonjs').AvonRequest} request
   * @param {import('@avonjs/avonjs').Repositories.Repository} queryBuilder
   * @returns {import('@avonjs/avonjs').Repositories.Repository}
   */
  relatableQuery(request, queryBuilder) {
    return queryBuilder;
  }

  /**
   * Build an "index" query for the given resource.
   *
   * @param {import('@avonjs/avonjs').AvonRequest} request
   * @param {import('@avonjs/avonjs').Repositories.Repository} queryBuilder
   * @returns {import('@avonjs/avonjs').Repositories.Repository}
   */
  indexQuery(request, queryBuilder) {
    return queryBuilder;
  }

  /**
   * Build a "detail" query for the given resource.
   *
   * @param {import('@avonjs/avonjs').AvonRequest} request
   * @param {import('@avonjs/avonjs').Repositories.Repository} queryBuilder
   * @returns {import('@avonjs/avonjs').Repositories.Repository}
   */
  detailQuery(request, queryBuilder) {
    return queryBuilder;
  }

  /**
   * Build a "review" query for the given resource.
   *
   * @param {import('@avonjs/avonjs').AvonRequest} request
   * @param {import('@avonjs/avonjs').Repositories.Repository} queryBuilder
   * @returns {import('@avonjs/avonjs').Repositories.Repository}
   */
  reviewQuery(request, queryBuilder) {
    return queryBuilder;
  }
};
